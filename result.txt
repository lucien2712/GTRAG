(timerag) C:\GTRAG\examples>python demo_gemini.py
============================================================
gtrag API Usage Demo
============================================================
1. üöÄ Initializing gtrag System...
2025-09-03 14:35:24,511 - INFO - Initialized FAISS vector store: dimension=768, metric=cosine, type=flat
2025-09-03 14:35:24,511 - INFO - Initialized FAISS vector store
2025-09-03 14:35:24,756 - INFO - gtrag system initialized successfully.
   ‚úÖ System initialization completed successfully

2. üìÑ Indexing documents with temporal metadata...
2025-09-03 14:35:24,756 - INFO - Starting document insertion: apple_q4_2023
2025-09-03 14:35:24,756 - INFO - Standardized time for apple_q4_2023: 2023Q4 (quarter)
2025-09-03 14:35:24,756 - INFO - Document apple_q4_2023 split into 1 chunks.
2025-09-03 14:35:27,732 - INFO - LLM response for apple_q4_2023 (first 500 chars): [
  {
    "entities": [
      {
        "entity_name": "Apple Inc.",
        "entity_type": "COMPANY",
        "entity_description": "A company mentioned in the text."
      },
      {
        "entity_name": "iPhone",
        "entity_type": "PRODUCT",
        "entity_description": "A product sold by Apple Inc."
      },
      {
        "entity_name": "80 million",
        "entity_type": "FINANCIAL_METRIC",
        "entity_description": "Number of iPhone units sold."
      },
      {
        "ent
2025-09-03 14:35:27,732 - INFO - Parsing 1 items from response for apple_q4_2023
2025-09-03 14:35:27,734 - WARNING - No entities/relations extracted from apple_q4_2023. Response format may be incorrect.
2025-09-03 14:35:27,734 - INFO - Chunk apple_q4_2023_chunk_0 extracted 0 entities, 0 relations.
   ‚úÖ Indexed [1/5]: apple_q4_2023
2025-09-03 14:35:27,734 - INFO - Starting document insertion: apple_launch_sep_2023
2025-09-03 14:35:27,736 - INFO - Standardized time for apple_launch_sep_2023: 2023-09-15 (day)
2025-09-03 14:35:27,736 - INFO - Document apple_launch_sep_2023 split into 1 chunks.
2025-09-03 14:35:29,388 - INFO - LLM response for apple_launch_sep_2023 (first 500 chars): [
  {
    "entity": "<|>Apple<|>COMPANY<|>Company that launched iPhone 15",
    "relationship": null
  },
  {
    "entity": "<|>iPhone 15<|>PRODUCT<|>A phone featuring titanium design and enhanced camera capabilities",
    "relationship": null
  },
  {
    "entity": "<|>September 15, 2023<|>Other<|>Launch date of iPhone 15",
    "relationship": null
  },
  {
    "entity": "<|>Titanium<|>TECHNOLOGY<|>Material used in the design of iPhone 15",
    "relationship": null
  },
  {
    "entity": "<|>Ap
2025-09-03 14:35:29,389 - INFO - Parsing 1 items from response for apple_launch_sep_2023
2025-09-03 14:35:29,389 - WARNING - No entities/relations extracted from apple_launch_sep_2023. Response format may be incorrect.
2025-09-03 14:35:29,389 - INFO - Chunk apple_launch_sep_2023_chunk_0 extracted 0 entities, 0 relations.
   ‚úÖ Indexed [2/5]: apple_launch_sep_2023
2025-09-03 14:35:29,390 - INFO - Starting document insertion: ms_march_2024
2025-09-03 14:35:29,390 - INFO - Standardized time for ms_march_2024: 2024-03 (month)
2025-09-03 14:35:29,390 - INFO - Document ms_march_2024 split into 1 chunks.
2025-09-03 14:35:32,284 - INFO - LLM response for ms_march_2024 (first 500 chars): [
  {
    "entities": [
      {
        "entity": "<|><Microsoft><|><COMPANY><|><Company>"
      },
      {
        "entity": "<|><Cloud Business><|><BUSINESS_CONCEPT><|><Microsoft's cloud business>"
      },
      {
        "entity": "<|><Revenue><|><FINANCIAL_METRIC><|><Cloud business revenue>"
      },
      {
        "entity": "<|><30%><|><FINANCIAL_METRIC><|><Growth rate of cloud business revenue>"
      },
      {
        "entity": "<|><March 2024><|><Other><|><Date of revenue growth>"

2025-09-03 14:35:32,286 - INFO - Parsing 1 items from response for ms_march_2024
2025-09-03 14:35:32,286 - WARNING - No entities/relations extracted from ms_march_2024. Response format may be incorrect.
2025-09-03 14:35:32,286 - INFO - Chunk ms_march_2024_chunk_0 extracted 0 entities, 0 relations.
   ‚úÖ Indexed [3/5]: ms_march_2024
2025-09-03 14:35:32,286 - INFO - Starting document insertion: google_annual_2024
2025-09-03 14:35:32,286 - INFO - Standardized time for google_annual_2024: 2024 (year)
2025-09-03 14:35:32,286 - INFO - Document google_annual_2024 split into 1 chunks.
2025-09-03 14:35:34,378 - INFO - LLM response for google_annual_2024 (first 500 chars): [
  {
    "entity": "<|>Google<|>COMPANY<|>Company that held an annual developer conference<|>",
    "relationship": "<|>Google<|>AI<|>showcased, advances<|>Google's annual developer conference showcased major AI advances<|>"
  },
  {
    "entity": "<|>2024<|>FINANCIAL_METRIC<|>Year of Google's annual developer conference<|>",
    "relationship": "<|>Google<|>2024<|>held in<|>Google held its annual developer conference in 2024<|>"
  },
  {
    "entity": "<|>AI<|>TECHNOLOGY<|>Major advances showc
2025-09-03 14:35:34,378 - INFO - Parsing 1 items from response for google_annual_2024
2025-09-03 14:35:34,389 - WARNING - No entities/relations extracted from google_annual_2024. Response format may be incorrect.
2025-09-03 14:35:34,389 - INFO - Chunk google_annual_2024_chunk_0 extracted 0 entities, 0 relations.
   ‚úÖ Indexed [4/5]: google_annual_2024
2025-09-03 14:35:34,389 - INFO - Starting document insertion: spacex_phase_alpha
2025-09-03 14:35:34,389 - INFO - Standardized time for spacex_phase_alpha: Phase-Alpha (custom)
2025-09-03 14:35:34,389 - INFO - Document spacex_phase_alpha split into 1 chunks.
2025-09-03 14:35:36,315 - INFO - LLM response for spacex_phase_alpha (first 500 chars): [
  {
    "entity": "<|>SpaceX<|>COMPANY<|>Company involved in the Mars mission project and tested the Raptor engine.",
    "relationship": null
  },
  {
    "entity": "<|>Phase-Alpha<|>BUSINESS_CONCEPT<|>Phase of the Mars mission project.",
    "relationship": null
  },
  {
    "entity": "<|>Mars Mission<|>BUSINESS_CONCEPT<|>A project involving a mission to Mars.",
    "relationship": null
  },
  {
    "entity": "<|>Raptor Engine<|>TECHNOLOGY<|>New engine design tested by SpaceX for improved ef
2025-09-03 14:35:36,315 - INFO - Parsing 1 items from response for spacex_phase_alpha
2025-09-03 14:35:36,315 - WARNING - No entities/relations extracted from spacex_phase_alpha. Response format may be incorrect.
2025-09-03 14:35:36,315 - INFO - Chunk spacex_phase_alpha_chunk_0 extracted 0 entities, 0 relations.
   ‚úÖ Indexed [5/5]: spacex_phase_alpha

3. üîó Building temporal connections...
2025-09-03 14:35:36,315 - INFO - Building temporal connections...
2025-09-03 14:35:36,315 - INFO - Building temporal connections using flexible TimeHandler...
2025-09-03 14:35:36,315 - INFO - Added 0 temporal evolution connections
2025-09-03 14:35:36,315 - INFO - Temporal connections built successfully.
   ‚úÖ Temporal connections built successfully

üìä System Statistics:
   - Documents indexed: 5
   - Graph nodes: 0
   - Graph edges: 0
   - Stored chunks: 5

4. üîç Query 1: What are the trends in Apple iPhone sales and product launches?
--------------------------------------------------------------------------------
2025-09-03 14:35:36,325 - INFO - Processing query: What are the trends in Apple iPhone sales and product launches?
2025-09-03 14:35:37,105 - INFO - Keywords extracted: high_level=2, low_level=2
2025-09-03 14:35:38,255 - INFO - Retrieved 0 entities, 0 relations.
2025-09-03 14:35:38,255 - INFO - Found 0 primary + 0 supplementary = 0 total unique chunks.
2025-09-03 14:35:38,256 - INFO - Final context prepared, total tokens: 286
2025-09-03 14:35:39,110 - INFO - Answer generation completed.
üìù Answer:
{
  "answer": "I am sorry, but I cannot provide information on trends in Apple iPhone sales and product launches, as the provided context data does not contain information about this topic."
}

üìà Retrieved Context:
   - Entities: 0
   - Relations: 0
   - Source chunks: 0
   - Total tokens: 286
   - Entity tokens: 0
   - Relation tokens: 0
   - Chunk tokens: 0

============================================================
üíæ Demonstrating Persistence & Reloading
============================================================

8. üíæ Saving gtrag system to working directory './demo_gtrag_workspace/'...
C:\Users\ericy\.conda\envs\timerag\lib\site-packages\networkx\readwrite\json_graph\node_link.py:142: FutureWarning:
The default value will be `edges="edges" in NetworkX 3.6.

To make this warning go away, explicitly set the edges kwarg, e.g.:

  nx.node_link_data(G, edges="links") to preserve current behavior, or
  nx.node_link_data(G, edges="edges") for forward compatibility.
  warnings.warn(
2025-09-03 14:35:39,121 - INFO - Graph saved to demo_gtrag_workspace\graph.json
2025-09-03 14:35:39,121 - INFO - Knowledge graph saved to: demo_gtrag_workspace\graph.json
2025-09-03 14:35:39,121 - INFO - Chunk store saved to: demo_gtrag_workspace\chunks.json
2025-09-03 14:35:39,130 - INFO - Saved FAISS vector store to demo_gtrag_workspace\vectors
2025-09-03 14:35:39,130 - INFO - Vector store saved to: demo_gtrag_workspace\vectors.*
2025-09-03 14:35:39,130 - INFO - Complete gtrag system saved to working directory: ./demo_gtrag_workspace/
   ‚úÖ gtrag system saved successfully!
   üìÅ Working directory created: demo_gtrag_workspace
   üìÅ Files created:
      - graph.json (Knowledge graph with entities/relations)
      - chunks.json (Original text chunks for context)
      - vectors.faiss (Vector index for fast search)
      - vectors.metadata.npy (Vector metadata)
   üìã Directory contents (4 files):
      - chunks.json (0.7 KB)
      - graph.json (0.1 KB)
      - vectors.faiss (0.0 KB)
      - vectors.metadata.npy (0.4 KB)

9. üìÇ Loading gtrag system from working directory...
2025-09-03 14:35:39,482 - INFO - Initialized FAISS vector store: dimension=768, metric=cosine, type=flat
2025-09-03 14:35:39,482 - INFO - Initialized FAISS vector store
2025-09-03 14:35:39,493 - INFO - gtrag system initialized successfully.
C:\Users\ericy\.conda\envs\timerag\lib\site-packages\networkx\readwrite\json_graph\node_link.py:287: FutureWarning:
The default value will be changed to `edges="edges" in NetworkX 3.6.

To make this warning go away, explicitly set the edges kwarg, e.g.:

  nx.node_link_graph(data, edges="links") to preserve current behavior, or
  nx.node_link_graph(data, edges="edges") for forward compatibility.
  warnings.warn(
2025-09-03 14:35:39,495 - INFO - Graph loaded from demo_gtrag_workspace\graph.json
2025-09-03 14:35:39,495 - INFO - Knowledge graph loaded from: demo_gtrag_workspace\graph.json
2025-09-03 14:35:39,495 - INFO - Chunk store loaded from: demo_gtrag_workspace\chunks.json
2025-09-03 14:35:39,495 - INFO - Loaded FAISS vector store from demo_gtrag_workspace\vectors
2025-09-03 14:35:39,495 - INFO - Vector store loaded from: demo_gtrag_workspace\vectors.*
2025-09-03 14:35:39,495 - INFO - Complete gtrag system loaded from working directory: ./demo_gtrag_workspace/
   ‚úÖ gtrag system loaded successfully!
   üìÇ Loaded from: demo_gtrag_workspace
   üìä Components loaded:
      - Graph: ‚úÖ
      - Chunks: ‚úÖ
      - Vectors: ‚úÖ
   üìä Loaded system statistics:
      - Documents: 0
      - Nodes: 0
      - Edges: 0
      - Chunks: 5

   üîç Testing query on loaded system...
2025-09-03 14:35:39,495 - INFO - Processing query: What did Apple achieve in 2024?
2025-09-03 14:35:40,708 - INFO - Keywords extracted: high_level=2, low_level=2
2025-09-03 14:35:41,885 - INFO - Retrieved 0 entities, 0 relations.
2025-09-03 14:35:41,885 - INFO - Found 0 primary + 0 supplementary = 0 total unique chunks.
2025-09-03 14:35:41,885 - INFO - Final context prepared, total tokens: 282
2025-09-03 14:35:42,670 - INFO - Answer generation completed.
      ‚úÖ Query successful! Answer length: 145
      üìä Retrieved: 0 entities, 0 relations

============================================================
üéâ Demo Completed Successfully!
============================================================

üí° You can now use the working directory:
   - To continue in another session: new_rag.load_graph('./demo_gtrag_workspace/')
   - All components are neatly organized in one directory
   - Easy to backup, share, or deploy to production
   - Clean separation of concerns with standardized file names

üìä Final System State:
   - indexed_documents: 5
   - indexed_chunks: 5
   - num_nodes: 0
   - num_edges: 0
   - node_types: {}
   - relation_keywords: {}
   - has_vector_store: True
   - total_vectors: 0
   - dimension: 768
   - metric: cosine
   - index_type: flat
   - is_trained: True
   - stored_chunks: 5

============================================================
Batch Processing Demo
============================================================
üìÅ Batch processing allows you to process multiple documents at once.
   Example usage:

    from gtrag.processing import BatchProcessor, BatchProcessingConfig

    # Configure batch processing
    config = BatchProcessingConfig(
        max_workers=4,
        batch_size=10,
        supported_formats=['.pdf', '.docx', '.txt', '.json']
    )

    # Initialize batch processor
    batch_processor = BatchProcessor(rag_system, config)

    # Process all documents in a directory
    results = batch_processor.process_directory("./documents/")

    # Process specific files
    file_list = ["doc1.pdf", "doc2.docx", "doc3.txt"]
    results = batch_processor.process_files(file_list)


   üìù This would process multiple files concurrently with:
      ‚Ä¢ Automatic file format detection
      ‚Ä¢ Flexible time extraction from filenames/content (quarters, dates, years, custom labels)
      ‚Ä¢ Progress tracking and error handling
      ‚Ä¢ Parallel processing for better performance